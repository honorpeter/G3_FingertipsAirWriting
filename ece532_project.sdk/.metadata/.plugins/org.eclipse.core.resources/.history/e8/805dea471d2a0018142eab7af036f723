/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include "xparameters.h"
#include "netif/xadapter.h"


#include "platform.h"
#include "platform_config.h"
#if defined (__arm__) || defined(__aarch64__)
#include "xil_printf.h"
#endif

#include "lwip/tcp.h"
#include "xil_cache.h"

#if LWIP_DHCP==1
#include "lwip/dhcp.h"
#endif

/* defined by each RAW mode application */
int start_application();
int transfer_data();
void tcp_fasttmr(void);
void tcp_slowtmr(void);

/* missing declaration in lwIP */
void lwip_init();

#if LWIP_DHCP==1
extern volatile int dhcp_timoutcntr;
err_t dhcp_start(struct netif *netif);
#endif

extern volatile int TcpFastTmrFlag;
extern volatile int TcpSlowTmrFlag;
static struct netif server_netif;
struct netif *echo_netif;

volatile unsigned int * LED_CONTROL = (unsigned int *)0x40010000;
volatile unsigned int * SW_CONTROL 	= (unsigned int *)0x40000000;
volatile unsigned int * FTPS_LOC 	= (unsigned int *)0x40020000;
volatile unsigned int * SEND_MSG 	= (unsigned int *)0x40050000;
volatile unsigned int * LED_IN_PRGS	= (unsigned int *)0x40060000;

unsigned int char_to_writedata (char* input_char)
{
	unsigned int return_val = (unsigned int)input_char[0];
	for (int i = 1; i <4; i++){
		return_val = (return_val <<8)+(unsigned int)input_char[i];
	}

	return return_val;
}

void
print_ip(char *msg, struct ip_addr *ip) 
{
	print(msg);
	xil_printf("%d.%d.%d.%d\n\r", ip4_addr1(ip), ip4_addr2(ip), 
			ip4_addr3(ip), ip4_addr4(ip));
}

void
print_ip_settings(struct ip_addr *ip, struct ip_addr *mask, struct ip_addr *gw)
{

	print_ip("Board IP: ", ip);
	print_ip("Netmask : ", mask);
	print_ip("Gateway : ", gw);
}

#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
int ProgramSi5324(void);
int ProgramSfpPhy(void);
#endif
#endif

#ifdef XPS_BOARD_ZCU102
#ifdef XPAR_XIICPS_0_DEVICE_ID
int IicPhyReset(void);
#endif
#endif

int main()
{
	struct ip_addr ipaddr, netmask, gw;

	/* the mac address of the board. this should be unique per board */
	unsigned char mac_ethernet_address[] =
	{ 0x00, 0x0a, 0x35, 0x00, 0x01, 0x02 };

	echo_netif = &server_netif;
#if defined (__arm__) && !defined (ARMR5)
#if XPAR_GIGE_PCS_PMA_SGMII_CORE_PRESENT == 1 || XPAR_GIGE_PCS_PMA_1000BASEX_CORE_PRESENT == 1
	ProgramSi5324();
	ProgramSfpPhy();
#endif
#endif

/* Define this board specific macro in order perform PHY reset on ZCU102 */
#ifdef XPS_BOARD_ZCU102
	IicPhyReset();
#endif

	init_platform();

#if LWIP_DHCP==1
    ipaddr.addr = 0;
	gw.addr = 0;
	netmask.addr = 0;
#else
	/* initliaze IP addresses to be used */
	IP4_ADDR(&ipaddr,  192, 168,   1, 10);
	IP4_ADDR(&netmask, 255, 255, 255,  0);
	IP4_ADDR(&gw,      192, 168,   1,  1);
#endif	

	lwip_init();

  	/* Add network interface to the netif_list, and set it as default */
	if (!xemac_add(echo_netif, &ipaddr, &netmask,
						&gw, mac_ethernet_address,
						PLATFORM_EMAC_BASEADDR)) {
		xil_printf("Error adding N/W interface\n\r");
		return -1;
	}
	netif_set_default(echo_netif);

	/* now enable interrupts */
	platform_enable_interrupts();

	/* specify that the network if is up */
	netif_set_up(echo_netif);

#if (LWIP_DHCP==1)
	/* Create a new DHCP client for this interface.
	 * Note: you must call dhcp_fine_tmr() and dhcp_coarse_tmr() at
	 * the predefined regular intervals after starting the client.
	 */
	dhcp_start(echo_netif);
	dhcp_timoutcntr = 24;

	while(((echo_netif->ip_addr.addr) == 0) && (dhcp_timoutcntr > 0))
		xemacif_input(echo_netif);

	if (dhcp_timoutcntr <= 0) {
		if ((echo_netif->ip_addr.addr) == 0) {
			xil_printf("DHCP Timeout\r\n");
			xil_printf("Configuring default IP of 192.168.1.10\r\n");
			IP4_ADDR(&(echo_netif->ip_addr),  192, 168,   1, 10);
			IP4_ADDR(&(echo_netif->netmask), 255, 255, 255,  0);
			IP4_ADDR(&(echo_netif->gw),      192, 168,   1,  1);
		}
	}

	ipaddr.addr = echo_netif->ip_addr.addr;
	gw.addr = echo_netif->gw.addr;
	netmask.addr = echo_netif->netmask.addr;
#endif
	print_ip_settings(&ipaddr, &netmask, &gw);
	unsigned int write_data_0 ;
	unsigned int write_data_1 ;
	unsigned int write_data_2 ;
	unsigned int write_data_3 ;

	/* receive and process packets */
	//this is for ftps locate
	int total_control;
	int ftps_location;
	int ftps_valid;
	unsigned char ftps_x;
	unsigned char ftps_y;
	unsigned char trans_x;
	unsigned char trans_y;
	char last_valid;
	last_valid = 0;
	int zero_input_count;
	int ftps_data[36] = {0};
	int send_request = 1;
	int send_count = 0;
	char send_data_0 [4] = "SYS ";
	char send_data_1 [4] = "MSG:";
	char send_data_2 [4] = " INI";
	char send_data_3 [4] = "TIAL";
	OLEDInitialize();
	OLEDInitDATA();
	print("OLED Display Initialized\n");
	print("Fingertips Locator System Initialized\n");
	while (1) {

		if (TcpFastTmrFlag) {
			tcp_fasttmr();
			TcpFastTmrFlag = 0;
		}
		if (TcpSlowTmrFlag) {
			tcp_slowtmr();
			TcpSlowTmrFlag = 0;
		}
		xemacif_input(echo_netif);

		*LED_CONTROL = *SW_CONTROL;
    	total_control = *SW_CONTROL;

    	if(total_control){
    		ftps_location = *FTPS_LOC;
    		ftps_valid = (ftps_location>>31)&0x1;
    		if (ftps_valid == 1){
    			ftps_x = ((ftps_location>>10)&0x000001ff)/8;
    			ftps_y = (ftps_location&0x000000ff)/8;
    			while (ftps_valid) {
    				ftps_valid = (*FTPS_LOC)&0x1;
    			}
    			if ((ftps_x != 0)||(ftps_y!=0)) {
    				last_valid = 1;
    				zero_input_count = 0;
    				trans_x = ftps_y - 2;//should have range 0-25
    				trans_y = ftps_x - 2;	//should have range 0-35
    				if ((trans_x>25) ||(trans_x<0)||(trans_y>35) ||(trans_y<0))
    					printf("Error: X = %d and Y = %d is out of range\n",trans_x,trans_y);
    				ftps_data[trans_y] = (1<<trans_x)| ftps_data[trans_y];
    				if (trans_x>0) {
    					ftps_data[trans_y] = (1<<(trans_x -1))| ftps_data[trans_y];
    					if (trans_y>0) {
    						ftps_data[trans_y-1] = (1<<(trans_x-1))| ftps_data[trans_y-1];
    					}
        				if (trans_y<35) {
        					ftps_data[trans_y+1] = (1<<(trans_x-1))| ftps_data[trans_y+1];
        				}
    				}
    				if (trans_x<25) {
    					ftps_data[trans_y] = (1<<(trans_x +1))| ftps_data[trans_y];
    					if (trans_y>0) {
    						ftps_data[trans_y-1] = (1<<(trans_x-1))| ftps_data[trans_y-1];
    					}
        				if (trans_y<35) {
        					ftps_data[trans_y+1] = (1<<(trans_x-1))| ftps_data[trans_y+1];
        				}
    				}
    				if (trans_y>0) {
    					ftps_data[trans_y-1] = (1<<trans_x)| ftps_data[trans_y-1];
    				}
    				if (trans_y<35) {
    					ftps_data[trans_y+1] = (1<<(trans_x))| ftps_data[trans_y+1];
    				}
//    				printf("Get fingertips X1=%d ; Y1=%d ",ftps_x,ftps_y );
//					printf("Get fingertips X=%d ; Y=%d \n",trans_x,trans_y );
    			} else {
    				if (zero_input_count < 3 && last_valid) {
    					zero_input_count++;
//						printf ("Zero code %d \n",zero_input_count);
    				}
    				if (zero_input_count >= 3 ) {
						*LED_IN_PRGS = 1;
//	    				printf ("start_rec %d \n",start_rec);
						//this section is charqcter rec
						char char_rec;
						char_rec= char_recognition(ftps_data);
						// This section update oled display
						OLED_UPDATE_DATA(char_rec,send_count%6, send_count/6);
						//this section is modify send_data  to IOT
						if(send_count < 4)
							send_data_0[send_count] = char_rec;
						if((send_count < 8)&&(send_count > 3))
							send_data_1[send_count-4] = char_rec;
						if((send_count < 12)&&(send_count > 7))
							send_data_2[send_count-8] = char_rec;
						if(send_count > 11)
							send_data_3[send_count-12] = char_rec;

						if (send_count < 2) {
							send_count ++;
//							printf ("send_count %d \n",send_count);
						} else {
							send_request = 1;
						}
						//xil_printf("matching index: %d\n\r",char_index);
						xil_printf("Matching character is: %c\n", char_rec);
						//add recognize function here
//						printf("The output is \n");
						for(int i=0;i<36;i++){
//							printf("%2d:",i);
//							for(int j=27;j>0;j--){
//								printf ("%1d",(ftps_data[i]>>j)&0b1);
//							}
//							printf("\n");
							ftps_data[i] = 0;
						}
						zero_input_count = 0;
						last_valid = 0;
						*LED_IN_PRGS = 0;
    				}
    			}
    		}
    	}
		if (*SEND_MSG == 1) {
			int i = 10;
			while (i>0) {
				if (*SEND_MSG == 1)
					i--;
				else i = 10;
			}
			send_request = 1;
			while (i<10) {
				if (*SEND_MSG == 0)
					i++;
				else i = 0;
			}
		}

		if ((send_request == 1)) {
			*LED_IN_PRGS = 1;
			send_count = 0;
			send_request = 0;
			OLED_CLEAN_DATA();
			write_data_0 = char_to_writedata(send_data_0);
			write_data_1 = char_to_writedata(send_data_1);
			write_data_2 = char_to_writedata(send_data_2);
			write_data_3 = char_to_writedata(send_data_3);
			start_application(1,NULL,write_data_0,write_data_1,write_data_2,write_data_3);
			for (int i = 0; i<4; i++){
				send_data_0[i] = ' ';
				send_data_1[i] = ' ';
				send_data_2[i] = ' ';
				send_data_3[i] = ' ';
			}
			*LED_IN_PRGS = 1;
		}
	}
	OLEDCleanup();
	/* never reached */
	cleanup_platform();

	return 0;
}
