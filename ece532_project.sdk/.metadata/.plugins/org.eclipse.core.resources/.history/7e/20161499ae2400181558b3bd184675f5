#include "lwip/err.h"
#include "lwip/tcp.h"
#include <math.h>

#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

#define BUFF_SIZE 	20
int is_tcp_write = 0;
unsigned char tcp_write_data[BUFF_SIZE] = {0x50,0x4f,0x53,0x54,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20};

int template[26][36] =
{{67108869,134217738,201326608,268435478,335544349,402653220,469762092,536870964,603979837,671088710,738197583,805306457,872415330,939524204,1006633078,1073741952,1140850826,1207959701,1275068576,1342177452,1409286327,1476395201,1543504083,1610612965,1677721848,1744830732,1811939616,1879048500,1946157376,2013266251,2080375126,2147484000,2214592873,2281701747,2348810620,2415919493},
{67108881,134217765,201326650,268435536,335544423,402653311,469762190,536871066,603979942,671088818,738197694,805306570,872415446,939524321,1006633198,1073742084,1140850969,1207959854,1275068741,1342177628,1409286516,1476395393,1543504269,1610613144,1677722018,1744830892,1811939766,1879048641,1946157517,2013266395,2080375283,2147484171,2214593059,2281701945,2348810830,2415919714},
{67108868,134217743,201326620,268435500,335544382,402653266,469762148,536871026,603979902,671088777,738197652,805306523,872415391,939524259,1006633127,1073741996,1140850865,1207959734,1275068603,1342177472,1409286341,1476395210,1543504078,1610612948,1677721820,1744830695,1811939570,1879048445,1946157323,2013266203,2080375087,2147483970,2214592850,2281701729,2348810603,2415919474},
{67108879,134217762,201326646,268435531,335544417,402653304,469762184,536871061,603979937,671088813,738197688,805306563,872415438,939524313,1006633187,1073742061,1140850935,1207959809,1275068683,1342177557,1409286431,1476395305,1543504179,1610613054,1677721929,1744830804,1811939679,1879048555,1946157431,2013266309,2080375196,2147484082,2214592967,2281701851,2348810733,2415919614},
{67108889,134217778,201326667,268435556,335544445,402653334,469762204,536871073,603979942,671088811,738197680,805306549,872415418,939524288,1006633175,1073742062,1140850949,1207959836,1275068723,1342177610,1409286479,1476395348,1543504217,1610613086,1677721955,1744830824,1811939693,1879048562,1946157431,2013266301,2080375190,2147484079,2214592968,2281701857,2348810746,2415919635},
{67108889,134217778,201326667,268435556,335544445,402653334,469762205,536871076,603979947,671088818,738197689,805306560,872415431,939524302,1006633173,1073742059,1140850946,1207959833,1275068720,1342177607,1409286494,1476395365,1543504236,1610613107,1677721978,1744830849,1811939720,1879048591,1946157462,2013266333,2080375204,2147484075,2214592946,2281701817,2348810688,2415919559},
{67108869,134217744,201326622,268435503,335544385,402653269,469762148,536871025,603979902,671088778,738197651,805306520,872415388,939524256,1006633124,1073741992,1140850860,1207959740,1275068620,1342177500,1409286380,1476395260,1543504134,1610613007,1677721880,1744830754,1811939629,1879048504,1946157380,2013266260,2080375146,2147484030,2214592913,2281701793,2348810668,2415919541},
{67108875,134217750,201326625,268435500,335544375,402653250,469762125,536871000,603979875,671088750,738197625,805306500,872415375,939524252,1006633141,1073742030,1140850919,1207959808,1275068697,1342177586,1409286461,1476395336,1543504211,1610613086,1677721961,1744830836,1811939711,1879048586,1946157461,2013266336,2080375211,2147484086,2214592961,2281701836,2348810711,2415919586},
{67108889,134217778,201326667,268435556,335544424,402653292,469762160,536871028,603979896,671088764,738197632,805306500,872415368,939524236,1006633104,1073741972,1140850840,1207959708,1275068576,1342177444,1409286312,1476395180,1543504048,1610612916,1677721784,1744830652,1811939520,1879048388,1946157256,2013266124,2080374992,2147483860,2214592749,2281701638,2348810527,2415919416},
{67108871,134217742,201326613,268435484,335544355,402653226,469762097,536870968,603979839,671088710,738197581,805306452,872415323,939524194,1006633065,1073741936,1140850807,1207959678,1275068549,1342177420,1409286291,1476395162,1543504033,1610612904,1677721779,1744830658,1811939537,1879048416,1946157297,2013266179,2080375066,2147483952,2214592835,2281701716,2348810595,2415919468},
{67108877,134217754,201326631,268435507,335544384,402653261,469762138,536871014,603979890,671088767,738197643,805306519,872415395,939524272,1006633150,1073742029,1140850908,1207959787,1275068667,1342177548,1409286427,1476395305,1543504183,1610613061,1677721938,1744830814,1811939690,1879048565,1946157441,2013266317,2080375193,2147484068,2214592944,2281701820,2348810696,2415919571},
{67108871,134217742,201326613,268435484,335544355,402653226,469762097,536870968,603979839,671088710,738197581,805306452,872415323,939524194,1006633065,1073741936,1140850807,1207959678,1275068549,1342177420,1409286291,1476395162,1543504033,1610612904,1677721775,1744830646,1811939517,1879048388,1946157259,2013266130,2080375019,2147483908,2214592797,2281701686,2348810575,2415919464},
{67108880,134217761,201326642,268435524,335544406,402653289,469762172,536871056,603979940,671088824,738197707,805306591,872415475,939524357,1006633239,1073742120,1140851001,1207959881,1275068762,1342177643,1409286524,1476395406,1543504287,1610613169,1677722050,1744830931,1811939812,1879048693,1946157574,2013266454,2080375334,2147484213,2214593092,2281701970,2348810848,2415919725},
{67108875,134217751,201326627,268435504,335544381,402653259,469762137,536871016,603979895,671088775,738197656,805306537,872415418,939524298,1006633178,1073742059,1140850940,1207959820,1275068701,1342177583,1409286464,1476395344,1543504224,1610613104,1677721986,1744830868,1811939749,1879048629,1946157508,2013266387,2080375266,2147484144,2214593021,2281701898,2348810775,2415919651},
{67108868,134217743,201326620,268435500,335544382,402653265,469762143,536871020,603979895,671088770,738197645,805306518,872415391,939524264,1006633137,1073742010,1140850883,1207959756,1275068629,1342177502,1409286375,1476395249,1543504122,1610612995,1677721868,1744830743,1811939619,1879048494,1946157370,2013266248,2080375132,2147484015,2214592895,2281701773,2348810649,2415919520},
{67108881,134217766,201326651,268435537,335544425,402653313,469762193,536871070,603979946,671088821,738197696,805306571,872415446,939524322,1006633199,1073742076,1140850955,1207959843,1275068730,1342177617,1409286502,1476395385,1543504265,1610613135,1677722004,1744830873,1811939742,1879048611,1946157480,2013266349,2080375218,2147484087,2214592956,2281701825,2348810694,2415919563},
{67108867,134217742,201326620,268435499,335544381,402653260,469762138,536871014,603979888,671088762,738197635,805306508,872415380,939524252,1006633124,1073741996,1140850868,1207959740,1275068612,1342177485,1409286358,1476395230,1543504104,1610612982,1677721862,1744830743,1811939623,1879048502,1946157384,2013266266,2080375150,2147484033,2214592915,2281701783,2348810650,2415919515},
{67108880,134217764,201326648,268435533,335544419,402653305,469762183,536871058,603979933,671088808,738197683,805306558,872415433,939524309,1006633185,1073742071,1140850957,1207959842,1275068726,1342177608,1409286488,1476395365,1543504240,1610613115,1677721992,1744830868,1811939745,1879048621,1946157497,2013266373,2080375250,2147484126,2214593001,2281701877,2348810753,2415919629},
{67108869,134217745,201326623,268435504,335544387,402653272,469762151,536871027,603979902,671088778,738197651,805306521,872415393,939524267,1006633142,1073742022,1140850902,1207959784,1275068664,1342177542,1409286419,1476395292,1543504163,1610613033,1677721908,1744830783,1811939658,1879048534,1946157412,2013266291,2080375177,2147484063,2214592947,2281701828,2348810706,2415919581},
{67108889,134217778,201326667,268435556,335544445,402653334,469762203,536871072,603979941,671088810,738197679,805306548,872415417,939524286,1006633155,1073742024,1140850893,1207959762,1275068631,1342177500,1409286369,1476395238,1543504107,1610612976,1677721845,1744830714,1811939583,1879048452,1946157321,2013266190,2080375059,2147483928,2214592797,2281701666,2348810535,2415919404},
{67108875,134217750,201326625,268435500,335544375,402653250,469762125,536871000,603979875,671088750,738197625,805306500,872415375,939524250,1006633125,1073742000,1140850875,1207959750,1275068625,1342177500,1409286375,1476395250,1543504125,1610613000,1677721875,1744830750,1811939626,1879048503,1946157382,2013266262,2080375148,2147484033,2214592915,2281701797,2348810675,2415919550},
{67108874,134217748,201326623,268435499,335544374,402653249,469762125,536871000,603979875,671088750,738197626,805306502,872415378,939524253,1006633128,1073742003,1140850878,1207959754,1275068630,1342177506,1409286381,1476395255,1543504129,1610613002,1677721875,1744830748,1811939621,1879048495,1946157368,2013266240,2080375111,2147483982,2214592852,2281701722,2348810591,2415919460},
{67108875,134217750,201326626,268435502,335544378,402653256,469762134,536871012,603979890,671088767,738197644,805306521,872415398,939524277,1006633156,1073742033,1140850910,1207959786,1275068661,1342177536,1409286413,1476395290,1543504169,1610613050,1677721930,1744830809,1811939687,1879048564,1946157441,2013266318,2080375195,2147484072,2214592947,2281701822,2348810696,2415919570},
{67108877,134217754,201326630,268435506,335544383,402653260,469762137,536871013,603979890,671088767,738197643,805306517,872415390,939524263,1006633135,1073742006,1140850875,1207959744,1275068615,1342177488,1409286361,1476395235,1543504109,1610612985,1677721862,1744830739,1811939616,1879048492,1946157369,2013266246,2080375123,2147483999,2214592875,2281701752,2348810629,2415919506},
{67108876,134217752,201326629,268435505,335544380,402653257,469762134,536871010,603979885,671088760,738197637,805306513,872415389,939524263,1006633136,1073742010,1140850883,1207959754,1275068624,1342177494,1409286363,1476395231,1543504099,1610612967,1677721835,1744830703,1811939571,1879048439,1946157307,2013266175,2080375043,2147483911,2214592779,2281701647,2348810515,2415919383},
{67108887,134217774,201326661,268435548,335544435,402653322,469762194,536871065,603979936,671088807,738197678,805306549,872415420,939524291,1006633161,1073742032,1140850903,1207959773,1275068643,1342177514,1409286385,1476395255,1543504126,1610612997,1677721868,1744830739,1811939611,1879048482,1946157353,2013266225,2080375114,2147484003,2214592892,2281701781,2348810670,2415919559}};




int transfer_data() {
	return 0;
}

/*void delay(int delays){

	int i = 0;
	int j = 0;
	for(; i < delays; ++i)j++;
	return;
}*/

void set_tcp_data (unsigned int tcp_mode,unsigned int write_data_in_0,unsigned int write_data_in_1,unsigned int write_data_in_2 ,unsigned int write_data_in_3){
	is_tcp_write = tcp_mode;
	tcp_write_data[4]=(write_data_in_0>>24)&0xff;
	tcp_write_data[5]=(write_data_in_0>>16)&0xff;
	tcp_write_data[6]=(write_data_in_0>>8)&0xff;
	tcp_write_data[7]=(write_data_in_0>>0)&0xff;
	tcp_write_data[8]=(write_data_in_1>>24)&0xff;
	tcp_write_data[9]=(write_data_in_1>>16)&0xff;
	tcp_write_data[10]=(write_data_in_1>>8)&0xff;
	tcp_write_data[11]=(write_data_in_1>>0)&0xff;
	tcp_write_data[12]=(write_data_in_2>>24)&0xff;
	tcp_write_data[13]=(write_data_in_2>>16)&0xff;
	tcp_write_data[14]=(write_data_in_2>>8)&0xff;
	tcp_write_data[15]=(write_data_in_2>>0)&0xff;
	tcp_write_data[16]=(write_data_in_3>>24)&0xff;
	tcp_write_data[17]=(write_data_in_3>>16)&0xff;
	tcp_write_data[18]=(write_data_in_3>>8)&0xff;
	tcp_write_data[19]=(write_data_in_3>>0)&0xff;
}
err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);

	/* echo back the payload */
	/* in this case, we assume that the payload is < TCP_SND_BUF */
	if (tcp_sndbuf(tpcb) > p->len) {
		err = tcp_write(tpcb, p->payload, p->len, 1);
	} else
		xil_printf("no space in tcp_sndbuf\n\r");
	char *result=(char *)p->payload;
	int tcp_readback_data = (int)((result[0]<<24)+(result[1]<<16)+(result[2]<<8)+(result[3]));
	*(int*)arg =  tcp_readback_data;
	xil_printf("get value: %x \n\r",tcp_readback_data);
	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

 err_t connect_callback (void *arg, struct tcp_pcb *tpcb, err_t err){

 	printf("Connected callback called\n");
	if(is_tcp_write){
		err_t write_error = tcp_write(tpcb,tcp_write_data, BUFF_SIZE,TCP_WRITE_FLAG_COPY);
		if(write_error != ERR_OK){
			xil_printf("Error: failed to write data to pcb buffer");
		}
		else{

			if(tcp_output(tpcb) != ERR_OK){
				xil_printf("Error: failed to send data to server\n");
				//delay(1000);
			}
			else{
				xil_printf("Send String:\n");
				for(int char_index = 0; char_index < BUFF_SIZE-4; char_index++){
					xil_printf("%c",tcp_write_data[char_index+4]);
				}
			}
		}

	}
	if(is_tcp_write==0){

			unsigned char command[BUFF_SIZE] = {71,69,84};
			err_t write_error = tcp_write(tpcb,command, 3,TCP_WRITE_FLAG_COPY);
			if(write_error != ERR_OK){
				xil_printf("Error: failed to write data to pcb buffer");
			}

	}
	return 0;
 }


int start_application(int tcp_write_in, int *data,unsigned int write_data_in_0, unsigned int write_data_in_1, unsigned int write_data_in_2, unsigned int write_data_in_3){
	struct tcp_pcb *pcb;
	err_t connect_err;
	u16_t port = 9090;
	struct ip_addr ipaddr;

	set_tcp_data(tcp_write_in,write_data_in_0,write_data_in_1,write_data_in_2,write_data_in_3);

	/* create new TCP PCB structure */
	pcb = tcp_new();
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}
	tcp_arg(pcb, (void*) data);
	tcp_recv(pcb, recv_callback);
	IP4_ADDR(&ipaddr,  192, 168,   1, 102); //set up the server IP address
	connect_err = tcp_connect(pcb, &ipaddr, port,connect_callback);
	if(connect_err == ERR_OK){
		xil_printf("Connect request has been sent from client\n");
		//connectecd = true;
	}
	else if(connect_err == ERR_VAL){
		xil_printf("Error: Invalid argumens passed\n");
	}
	else{
		xil_printf("Error: failed to send connect request\n");
	}
	xil_printf("client should be connected and starts sending data\n");

	return 0;
}

float average(int *temparr){
	int i,j,temp,sum;
	sum = 0;
	for(i=0;i<36;i++){
		temp = *(temparr+i);
		//xil_printf("temp: %d\n\r",temp);
		//convert each integer to binary and sum it up
		for(j=0;temp>0;j++){
			sum += temp%2;
			temp = temp/2;
		}
	}
	return (sum/936.0);
}
char find_char_from_index(int index) {
    if (index == 0) {
        return 'A';
    } else if (index == 1) {
        return 'B';
    } else if (index == 2) {
        return 'C';
    } else if (index == 3) {
        return 'D';
    } else if (index == 4) {
        return 'E';
    } else if (index == 5) {
        return 'F';
    } else if (index == 6) {
        return 'G';
    } else if (index == 7) {
        return 'H';
    } else if (index == 8) {
        return 'I';
    } else if (index == 9) {
        return 'J';
    } else if (index == 10) {
        return 'K';
    } else if (index == 11) {
        return 'L';
    } else if (index == 12) {
        return 'M';
    } else if (index == 13) {
        return 'N';
    } else if (index == 14) {
        return 'O';
    } else if (index == 15) {
        return 'P';
    } else if (index == 16) {
        return 'Q';
    } else if (index == 17) {
        return 'R';
    } else if (index == 18) {
        return 'S';
    } else if (index == 19) {
        return 'T';
    } else if (index == 20) {
        return 'U';
    } else if (index == 21) {
        return 'V';
    } else if (index == 22) {
        return 'W';
    } else if (index == 23) {
        return 'X';
    } else if (index == 24) {
        return 'Y';
    } else if (index == 25) {
        return 'Z';
    } else {
        return -1;
    }
}

char char_recognition(int *temp1){
	float corr_max;
	corr_max = -100;
	int index = 0;
	for(int char_index=0;char_index<26;char_index++){
		float corr;
		float A_mean = average(temp1);
		float B_mean = average(template[char_index]);
		//printf("%f\n", A_mean);
		float top = 0, bot1 = 0, bot2 = 0;
		int A[26] = {0};
		int B[26] = {0};
		for(int line = 0; line<36;line++){
			int tempval = *(temp1+line);
			//xil_printf("%d\n\r",tempval);
			for(int j=0;tempval>0;j++){
				A[j] = tempval%2;
				//xil_printf("%d", A_bit[j]);
				tempval = tempval/2;
			}
			tempval = *(template[char_index]+line);
			for(int j=0;tempval>0;j++){
				B[j] = tempval%2;
				//xil_printf("%d", A_bit[j]);
				tempval = tempval/2;
			}
			for(int j=0;j<26;j++){
				top += (A[j]-A_mean)*(B[j]-B_mean);
				bot1 += (A[j]-A_mean)*(A[j]-A_mean);
				bot2 += (B[j]-B_mean)*(B[j]-B_mean);
			}
		}
		corr = top/(sqrt(bot1*bot2));
		if (corr > corr_max){
			index = char_index;
			corr_max = corr;
		}
	}
	return find_char_from_index(index);
}

