#include "lwip/err.h"
#include "lwip/tcp.h"
#include <math.h>

#if defined (__arm__) || defined (__aarch64__)
#include "xil_printf.h"
#endif

#define BUFF_SIZE 	20
int is_tcp_write = 0;
unsigned char tcp_write_data[BUFF_SIZE] = {0x50,0x4f,0x53,0x54,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20};

int template[26][40] =
{{522240,522240,523264,523264,523264,1047552,1047552,1048064,1048064,2096640,2096640,2080512,4177664,4144896,4144896,4136896,4132800,4132800,16650176,16519104,16517088,33294304,33032160,33032160,33031136,33554416,33554416,67108856,67108856,67108856,67108856,133169656,132121080,132120828,534773886,532676734,528482431,528482367,528482367,528482367},
{1073741312,1073741760,1073741792,1073741808,1073741808,1073741820,1073741822,1065355262,1065353726,1065353726,1065353726,1065353726,1065353726,1065353726,1065353724,1065355256,1073741808,1073741808,1073741792,1073741792,1073741816,1073741820,1073741822,1065355262,1065353727,1065353343,1065353343,1065353279,1065353279,1065353279,1065353343,1065353471,1065353727,1073741822,1073741822,1073741822,1073741820,1073741808,1073741792,1073741760},
{64512,1048448,2097088,16777184,16777200,33554424,67108860,134090750,133694462,133169406,132120703,266338430,532676800,528482304,528482304,528482304,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,528482304,528482424,528482428,264241279,132120703,132120830,133694462,133957630,67108860,33554424,33554416,16777184,8388576,1048448,523776},
{1073739776,1073741696,1073741760,1073741792,1073741792,1073741808,1073741816,1065361404,1065354238,1065353726,1065353726,1065353470,1065353343,1065353343,1065353343,1065353279,1065353279,1065353279,1065353279,1065353279,1065353279,1065353279,1065353279,1065353279,1065353279,1065353279,1065353343,1065353343,1065353343,1065353470,1065353726,1065354238,1065355260,1073741816,1073741808,1073741808,1073741792,1073741760,1073741312,1073741312},
{1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1073741816,1073741816,1073741816,1073741816,1073741816,1073741816,1073741816,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823},
{1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1073741816,1073741816,1073741816,1073741816,1073741816,1073741816,1073741816,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672},
{261120,1048448,2097120,16777200,16777208,33554424,67108860,66847742,133693950,133169407,266338431,532676732,528482336,528482304,528482304,528482304,1056964608,1056964608,1056964608,1056980991,1056980991,1056980991,1056980991,1056980991,528498687,528482367,528482367,528482367,532676671,266338367,132120703,133169279,133956607,67108863,33554431,16777214,16777212,8388592,1048512,524160},
{1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343},
{1073741823,1073741823,1073741823,1073741823,1073741823,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,516096,1073741823,1073741823,1073741823,1073741823,1073741823},
{511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,511,31457791,1071645183,1071645183,535822847,536347647,536610814,536870910,268435454,134217724,67108848,33554400,16777152,2096640},
{1065353727,1065354238,1065354238,1065355256,1065355248,1065361392,1065369568,1065385920,1065385856,1065418496,1065484032,1065483776,1065614336,1066399744,1066399744,1067446272,1073733632,1073739776,1073739776,1073739776,1073740800,1073740800,1073282560,1073282560,1072725760,1072725760,1069580160,1065369536,1065361344,1065357280,1065357296,1065355248,1065355248,1065354232,1065354232,1065353726,1065353726,1065353726,1065353471,1065353343},
{1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1071644672,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823},
{1072693759,1072694271,1072694271,1073218559,1073218559,1073218559,1073219583,1073481727,1073481727,1073481727,1073481727,1073481695,1073483743,1073483743,1065095135,1061097439,1061097375,1061097247,1061097247,1059004191,1059012383,1059012383,1059012383,1059045151,1059044895,1059044895,1059061279,1058012703,1058012703,1058012703,1058012703,1058012191,1058012191,1058012191,1057487903,1057487903,1057486879,1057486879,1057486879,1057224735},
{1069547583,1071644735,1071644735,1072693311,1072693311,1072693311,1073217599,1073479743,1073479743,1073610815,1073676351,1073709119,1073709119,1073709119,1071628351,1067434047,1067442239,1066393663,1066399807,1065875519,1065876543,1065876543,1065483839,1065483839,1065418303,1065418303,1065385919,1065385983,1065385983,1065369599,1065361407,1065357311,1065355263,1065355263,1065354239,1065354239,1065353727,1065353727,1065353727,1065353471},
{260096,2096896,8388480,16777152,33554416,33554416,67108856,133695480,133694460,132120830,266338430,532676735,528482431,528482367,528482367,528482367,1056964671,1056964671,1056964671,1056964671,1056964671,1056964671,1056964671,1056964671,1065353279,528482367,528482367,528482431,532676735,534773887,266338558,133170172,133695480,67108856,67108848,33554416,16777184,8388544,2097024,1047552},
{1073741312,1073741792,1073741792,1073741808,1073741820,1073741822,1073741822,1065357310,1065353727,1065353471,1065353343,1065353343,1065353343,1065353343,1065353343,1065353727,1065353727,1065354239,1065357310,1073741822,1073741820,1073741816,1073741792,1073741792,1073741568,1073740800,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216,1065353216},
{258048,2096640,16777088,16777152,33554400,67108832,133959664,133695480,133170168,264241656,528482556,528482430,528482430,528482430,520093822,1056964670,1056964670,1056964670,1056964670,1056964670,1056964670,1056964670,1056964734,520093822,520093822,528498814,528546046,532740604,266403320,132186104,133709808,134217696,33554416,33554430,16777215,8388607,1047807,62,30,14},
{1073740800,1073741760,1073741760,1073741792,1073741808,1073741808,1073741816,1065355256,1065354232,1065353720,1065353720,1065353720,1065353720,1065353720,1065354232,1065355256,1065357296,1073741808,1073741808,1073741792,1073741760,1073741568,1073739776,1073740800,1065483776,1065418240,1065385856,1065385920,1065369536,1065361376,1065357296,1065357296,1065355248,1065355256,1065354232,1065354232,1065353726,1065353726,1065353726,1065353471},
{522240,4194176,8388544,33554400,67108848,67108848,134217720,133695480,133170168,132121084,132121086,133169632,133169152,133955584,134184960,134209536,67108352,67108800,33554400,16777208,4194296,1048572,131070,32766,2047,511,127,1065353343,1065353343,532676735,534773887,535822591,267912190,134217726,134217726,67108860,67108856,16777200,8388544,2097024},
{1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240,522240},
{1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,1065353343,532676735,534773887,534774015,535822847,536347646,268435454,134217724,67108856,33554416,33554416,8388544,2097024},
{1065353279,528482431,532676735,534773887,534773887,534773886,132120830,132121084,132121080,133169656,66060792,66061304,66585592,66585584,33031152,33032176,33032160,33294304,16517088,16519136,16650208,16715712,16715712,4132800,4136896,4144896,4144896,2080512,2080512,2080512,2096896,1048064,1048064,1047552,1047552,523264,523264,523264,522240,522240},
{1040316431,503445535,503576607,503838751,503838751,503838751,520616991,520616991,520616991,520616991,520616990,252181566,118471742,118471742,126860350,126860862,126860862,126828092,126828088,59719224,59711032,59706936,59706936,60755576,64949880,67047160,67047416,66981872,66850800,66850800,33296368,33294320,33294320,33294320,33294320,33032160,33032160,33032160,33031136,33031136},
{534774270,133169662,133170168,66585592,66586608,66586608,33296368,33427424,16719840,16728000,8339392,4194176,4194048,2096896,2096640,1048064,1047552,523264,522240,522240,1047552,1047552,2096640,2096640,2096896,2096896,8388480,16728000,16719808,16715744,16650224,66850800,66586608,66585592,66585592,133169662,534774270,534774270,534774015,1071644799},
{1069547647,534773887,534774015,534774270,132121086,133170168,66585592,66585592,66585584,33294320,16519136,16650208,16715712,8331200,4177792,2080512,2080512,2096640,1048064,1047552,523264,523264,522240,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024,129024},
{134217727,134217727,134217727,134217727,134217727,134217727,134217727,1023,1020,4088,4088,4080,8160,32704,65472,65408,130816,130560,523776,523264,1046528,2095104,2088960,4186112,8372224,16760832,16744448,33423360,133955584,133955584,133955584,267386880,1072693248,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823,1073741823}};


int transfer_data() {
	return 0;
}

/*void delay(int delays){

	int i = 0;
	int j = 0;
	for(; i < delays; ++i)j++;
	return;
}*/

void set_tcp_data (unsigned int tcp_mode,unsigned int write_data_in_0,unsigned int write_data_in_1,unsigned int write_data_in_2 ,unsigned int write_data_in_3){
	is_tcp_write = tcp_mode;
	tcp_write_data[4]=(write_data_in_0>>24)&0xff;
	tcp_write_data[5]=(write_data_in_0>>16)&0xff;
	tcp_write_data[6]=(write_data_in_0>>8)&0xff;
	tcp_write_data[7]=(write_data_in_0>>0)&0xff;
	tcp_write_data[8]=(write_data_in_1>>24)&0xff;
	tcp_write_data[9]=(write_data_in_1>>16)&0xff;
	tcp_write_data[10]=(write_data_in_1>>8)&0xff;
	tcp_write_data[11]=(write_data_in_1>>0)&0xff;
	tcp_write_data[12]=(write_data_in_2>>24)&0xff;
	tcp_write_data[13]=(write_data_in_2>>16)&0xff;
	tcp_write_data[14]=(write_data_in_2>>8)&0xff;
	tcp_write_data[15]=(write_data_in_2>>0)&0xff;
	tcp_write_data[16]=(write_data_in_3>>24)&0xff;
	tcp_write_data[17]=(write_data_in_3>>16)&0xff;
	tcp_write_data[18]=(write_data_in_3>>8)&0xff;
	tcp_write_data[19]=(write_data_in_3>>0)&0xff;
}
err_t recv_callback(void *arg, struct tcp_pcb *tpcb,
                               struct pbuf *p, err_t err)
{
	/* do not read the packet if we are not in ESTABLISHED state */
	if (!p) {
		tcp_close(tpcb);
		tcp_recv(tpcb, NULL);
		return ERR_OK;
	}

	/* indicate that the packet has been received */
	tcp_recved(tpcb, p->len);

	/* echo back the payload */
	/* in this case, we assume that the payload is < TCP_SND_BUF */
	if (tcp_sndbuf(tpcb) > p->len) {
		err = tcp_write(tpcb, p->payload, p->len, 1);
	} else
		xil_printf("no space in tcp_sndbuf\n\r");
	char *result=(char *)p->payload;
	int tcp_readback_data = (int)((result[0]<<24)+(result[1]<<16)+(result[2]<<8)+(result[3]));
	*(int*)arg =  tcp_readback_data;
	xil_printf("get value: %x \n\r",tcp_readback_data);
	/* free the received pbuf */
	pbuf_free(p);

	return ERR_OK;
}

 err_t connect_callback (void *arg, struct tcp_pcb *tpcb, err_t err){

 	printf("Connected callback called\n");
	if(is_tcp_write){
		err_t write_error = tcp_write(tpcb,tcp_write_data, BUFF_SIZE,TCP_WRITE_FLAG_COPY);
		if(write_error != ERR_OK){
			xil_printf("Error: failed to write data to pcb buffer");
		}
		else{

			if(tcp_output(tpcb) != ERR_OK){
				xil_printf("Error: failed to send data to server\n");
				//delay(1000);
			}
			else{
				xil_printf("Send String:\n");
				for(int char_index = 0; char_index < BUFF_SIZE-4; char_index++){
					xil_printf("%c",tcp_write_data[char_index+4]);
				}
			}
		}

	}
	if(is_tcp_write==0){

			unsigned char command[BUFF_SIZE] = {71,69,84};
			err_t write_error = tcp_write(tpcb,command, 3,TCP_WRITE_FLAG_COPY);
			if(write_error != ERR_OK){
				xil_printf("Error: failed to write data to pcb buffer");
			}

	}
	return 0;
 }


int start_application(int tcp_write_in, int *data,unsigned int write_data_in_0, unsigned int write_data_in_1, unsigned int write_data_in_2, unsigned int write_data_in_3){
	struct tcp_pcb *pcb;
	err_t connect_err;
	u16_t port = 9090;
	struct ip_addr ipaddr;

	set_tcp_data(tcp_write_in,write_data_in_0,write_data_in_1,write_data_in_2,write_data_in_3);

	/* create new TCP PCB structure */
	pcb = tcp_new();
	if (!pcb) {
		xil_printf("Error creating PCB. Out of Memory\n\r");
		return -1;
	}
	tcp_arg(pcb, (void*) data);
	tcp_recv(pcb, recv_callback);
	IP4_ADDR(&ipaddr,  192, 168,   1, 102); //set up the server IP address
	connect_err = tcp_connect(pcb, &ipaddr, port,connect_callback);
	if(connect_err == ERR_OK){
		xil_printf("Connect request has been sent from client\n");
		//connectecd = true;
	}
	else if(connect_err == ERR_VAL){
		xil_printf("Error: Invalid argumens passed\n");
	}
	else{
		xil_printf("Error: failed to send connect request\n");
	}
	xil_printf("client should be connected and starts sending data\n");

	return 0;
}

float average(int *temparr){
	int i,j,temp,sum;
	sum = 0;
	for(i=0;i<40;i++){
		temp = *(temparr+i);
		//xil_printf("temp: %d\n\r",temp);
		//convert each integer to binary and sum it up
		for(j=0;temp>0;j++){
			sum += temp%2;
			temp = temp/2;
		}
	}
	return (sum/1200.0);
}
char find_char_from_index(int index) {
    if (index == 0) {
        return 'A';
    } else if (index == 1) {
        return 'B';
    } else if (index == 2) {
        return 'C';
    } else if (index == 3) {
        return 'D';
    } else if (index == 4) {
        return 'E';
    } else if (index == 5) {
        return 'F';
    } else if (index == 6) {
        return 'G';
    } else if (index == 7) {
        return 'H';
    } else if (index == 8) {
        return 'I';
    } else if (index == 9) {
        return 'J';
    } else if (index == 10) {
        return 'K';
    } else if (index == 11) {
        return 'L';
    } else if (index == 12) {
        return 'M';
    } else if (index == 13) {
        return 'N';
    } else if (index == 14) {
        return 'O';
    } else if (index == 15) {
        return 'P';
    } else if (index == 16) {
        return 'Q';
    } else if (index == 17) {
        return 'R';
    } else if (index == 18) {
        return 'S';
    } else if (index == 19) {
        return 'T';
    } else if (index == 20) {
        return 'U';
    } else if (index == 21) {
        return 'V';
    } else if (index == 22) {
        return 'W';
    } else if (index == 23) {
        return 'X';
    } else if (index == 24) {
        return 'Y';
    } else if (index == 25) {
        return 'Z';
    } else {
        return -1;
    }
}

char char_recognition(int *temp1){
	float corr_max;
	corr_max = -100;
	int index = 0;
	for(int char_index=0;char_index<26;char_index++){
		float corr;
		float A_mean = average(temp1);
		float B_mean = average(template[char_index]);
		//printf("%f\n", A_mean);
		float top = 0, bot1 = 0, bot2 = 0;
		int A[30] = {0};
		int B[30] = {0};
		for(int line = 0; line<40;line++){
			int tempval = *(temp1+line);
			//xil_printf("%d\n\r",tempval);
			for(int j=0;tempval>0;j++){
				A[j] = tempval%2;
				//xil_printf("%d", A_bit[j]);
				tempval = tempval/2;
			}
			tempval = *(template[char_index]+line);
			for(int j=0;tempval>0;j++){
				B[j] = tempval%2;
				//xil_printf("%d", A_bit[j]);
				tempval = tempval/2;
			}
			for(int j=0;j<30;j++){
				top += (A[j]-A_mean)*(B[j]-B_mean);
				bot1 += (A[j]-A_mean)*(A[j]-A_mean);
				bot2 += (B[j]-B_mean)*(B[j]-B_mean);
			}
		}
		corr = top/(sqrt(bot1*bot2));
		if (corr > corr_max){
			index = char_index;
			corr_max = corr;
		}
	}
	return find_char_from_index(index);
}

